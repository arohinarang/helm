name: Run Terraform Plan

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.runner.outputs.runner }}
    steps:
      - uses: actions/checkout@v3
      - name: Extract values from branch
        id: runner
        run: |
          str="gcp-us-east2-dev-trials"
          array2=()
          IFS='-'     # hyphen (-) is set as delimiter
          read -ra ADDR <<< "$str"   # str is read into an array as tokens separated by IFS
          for i in "${ADDR[@]}"; do
            if [ "$i" == "gcp" -o "$i" == "us" -o "$i" == "east2" ] ; then # access each element of array
              array2+=("$i")
            fi
          done
          echo "::set-output name=runner::macos-latest" 

  plan:
    needs: build
    if: ${{ github.event.pull_request.head.ref == 'terraform'}}
    # runs-on: ubuntu-latest
    runs-on: ["self-hosted","${{ needs.build.outputs.runner }}"] 

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Run a multi-line script
        run: |
          echo "Do something here"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Terraform version
        run: terraform --version

      - name: Terraform Init
        run: terraform init 
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      
      - name: Terraform Format
        run: terraform fmt -list=true -write=false -diff=true -check=true

      - name: Terraform Plan
        run: |-
          terraform plan -input=false -no-color -out=tfplan \
          && terraform show -no-color tfplan
        id: plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      
      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt   
      
      - name: Put Plan in Env Var
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Write Terraform plan output to comments
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ env.PLAN }}`
            })
      

